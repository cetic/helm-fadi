adminer:
  config:
    design: pepa-linha
  enabled: true
  image:
    repository: sellamirami/adminer
    tag: latest
  ingress:
    enabled: true
    hosts:
    - adminer.quadride.cetic.be
  service:
    type: LoadBalancer
airflow:
  auth:
    fernetKey: _WJG5F2fIZ6q5LH03MQE45stfYpuLpeqzYcqOIxvCbs=
    forcePassword: false
    password: R43SDcj1eRYYbPOd
    username: admin
  enabled: true
  executor: KubernetesExecutor
  externalDatabase:
    database: postgres
    host: fadi-postgresql
    password: R43SDcj1eRYYbPOd
    port: 5432
    user: admin
  extraEnvVars:
  - name: PYTHONPATH
    value: /opt/bitnami/airflow/dags/git_quadride
  - name: PYSPARK_PYTHON
    value: python3
  - name: AIRFLOW_CONN_QUADRIDE_KUBERNETES
    value: http://k8s%3A%2F%2Fhttps%3A%2F%2Fkubernetes.default.svc:443?deploy-mode=cluster
  - name: AIRFLOW_CONN_QUADRIDE_CONFLUENT_REGISTRY
    value: http://confluent-registry-cp-schema-registry:8081
  - name: AIRFLOW_CONN_QUADRIDE_KAFKA_SERVER
    value: http://fadi-kafka:9092
  - name: AIRFLOW_CONN_QUADRIDE_CASSANDRA_SERVER
    value: cassandra://quadride_cassandra:8d3Bk38KthTJSZWR@fadi-cassandra:9042
  - name: AIRFLOW_CONN_QUADRIDE_MINIO_SERVER
    value: s3://:@?host=http%3A%2F%2Ffadi-minio%3A9000&aws_access_key_id=admin&aws_secret_access_key=R43SDcj1eRYYbPOd
  - name: AIRFLOW_CONN_MLFLOW_TRACKING_URI
    value: http://fadi-mlflow
  - name: AIRFLOW__LOGGING__REMOTE_LOGGING
    value: "True"
  - name: AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID
    value: quadride_minio_server
  - name: AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER
    value: s3://airflow-logs
  - name: AIRFLOW__LOGGING__ENCRYPT_S3_LOGS
    value: "False"
  git:
    dags:
      enabled: true
      repositories:
      - branch: master
        name: quadride
        path: pipelines/ETL/
        repository: https://quadride-NSI:glpat-U9atuyzpT18gMeyZVp-L@git.cetic.be/quadride/quadride
  ingress:
    enabled: true
    hosts:
    - name: airflow.quadride.cetic.be
      path: /
  ldap:
    base: dc=ldap,dc=cetic,dc=be
    binddn: cn=admin,dc=ldap,dc=cetic,dc=be
    bindpw: R43SDcj1eRYYbPOd
    enabled: false
    uidField: cn
    uri: ldap://fadi-openldap:389
  metrics:
    enabled: false
  postgresql:
    enabled: false
  redis:
    enabled: false
    password: R43SDcj1eRYYbPOd
  scheduler:
    image:
      pullSecrets:
      - secret-nexus-docker-quadride
      registry: nexus.cetic.be:8125
      repository: quadride-airflow-scheduler
      tag: latest
  service:
    port: 8080
    type: LoadBalancer
  web:
    image:
      pullSecrets:
      - secret-nexus-docker-quadride
      registry: nexus.cetic.be:8125
      repository: quadride-airflow
      tag: latest
  worker:
    image:
      pullSecrets:
      - secret-nexus-docker-quadride
      registry: nexus.cetic.be:8125
      repository: quadride-airflow-worker
      tag: latest
cassandra:
  affinity: {}
  config:
    cluster_size: 1
    seed_size: 1
    start_rpc: true
  dbUser:
    password: 8d3Bk38KthTJSZWR
    user: quadride_cassandra
  enabled: true
drupal:
  enabled: false
  ingress:
    enabled: false
    hostname: null
elasticsearch:
  enabled: false
filebeat:
  config:
    output.file.enabled: false
    output.logstash:
      hosts:
      - fadi-logstash:5044
  enabled: false
  indexTemplateLoad:
  - fadi-elasticsearch-client:9200
grafana:
  adminUser: admin
  enabled: true
  grafana.ini:
    analytics:
      check_for_updates: true
    auth.ldap:
      allow_sign_up: true
      config_file: /etc/grafana/ldap.toml
      enabled: true
    grafana_net:
      url: https://grafana.net
    log:
      mode: console
    paths:
      data: /var/lib/grafana/data
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
      provisioning: /etc/grafana/provisioning
  ldap:
    config: |-
      verbose_logging = true
      [[servers]]
      host = "fadi-openldap"
      port = 389
      use_ssl = false
      start_tls = false
      ssl_skip_verify = false
      bind_dn = "cn=admin,DC=ldap,DC=cetic,DC=be"
      bind_password = 'R43SDcj1eRYYbPOd'
      search_filter = "(|(cn=%s)(&(cn=%s)(memberOf=cn=admin,DC=ldap,DC=cetic,DC=be)))"
      search_base_dns = ["cn=admin,dc=ldap,dc=cetic,dc=be"]
      group_search_base_dns = ["ou=Groups,dc=ldap,dc=cetic,dc=be"]

      [[servers.group_mappings]]
      group_dn = "*"
      org_role = "Admin"
      ##grafana_admin = true

      #group_dn = "cn=amen,DC=ldap,DC=cetic,DC=be"
      #org_role = "Viewer"

      [servers.attributes]
      name = "givenName"
      surname = "sn"
      username = "cn"
      member_of = "memberOf"
      email =  "email"
    enabled: true
    existingSecret: ""
  persistence:
    enabled: true
  service:
    type: LoadBalancer
  traefikIngress:
    enabled: true
    host: grafana.quadride.cetic.be
jupyterhub:
  enabled: true
  hub:
    config:
      JupyterHub:
        authenticator_class: ldapauthenticator.LDAPAuthenticator
      LDAPAuthenticator:
        bind_dn_template:
        - cn={username},dc=ldap,dc=cetic,dc=be
        - cn={username},cn=admin,dc=ldap,dc=cetic,dc=be
        escape_userdn: false
        lookup_dn: false
        server_address: fadi-openldap
        use_ssl: false
        user_attribute: cn
  prePuller:
    hook:
      enabled: false
  proxy:
    db:
      type: sqlite-memory
    secretToken: af83775ec3bfaf0507ce596df51d491e7ed54450adc454038fa7405495465f19
  rbac:
    enabled: true
  singleuser:
    image:
      name: jupyter/minimal-notebook
      tag: 7d427e7a4dde
    profileList:
    - default: true
      description: 'To avoid too much bells and whistles: Python.'
      display_name: Minimal environment
    - description: 'If you want the additional bells and whistles: Python, R, and
        Julia.'
      display_name: Datascience environment
      kubespawner_override:
        image: jupyter/datascience-notebook:7d427e7a4dde
    - description: The Jupyter Stacks spark image
      display_name: Spark environment
      kubespawner_override:
        image: jupyter/all-spark-notebook:latest
    - description: TensorFlow Notebook
      display_name: tensorflow environment
      kubespawner_override:
        image: jupyter/tensorflow-notebook:latest
    storage:
      capacity: 5Gi
  traefikIngress:
    enabled: true
    host: jupyterhub.quadride.cetic.be
kafka:
  affinity: {}
  deleteTopicEnable: true
  enabled: true
  external:
    enabled: false
  persistence:
    enabled: true
  replicas: 1
  zookeeper:
    fullnameOverride: fadi-kafka-zookeeper
    replicaCount: 1
kibana:
  enabled: false
  env:
    ELASTICSEARCH_HOSTS: http://{{ .Release.Name }}-elasticsearch-client:9200
logstash:
  elasticsearch:
    host: fadi-elasticsearch-client
  enabled: false
minio:
  accessKey: admin
  enabled: true
  ingress:
    enabled: true
    hosts:
    - minio.quadride.cetic.be
    proxyBodySize: 100m
  persistence:
    enabled: true
    size: 50Gi
  secretKey: R43SDcj1eRYYbPOd
  service:
    type: NodePort
mlflow:
  db:
    database: mlflow
    host: fadi-postgresql
    password: R43SDcj1eRYYbPOd
    port: 5432
    user: admin
  enabled: true
  image:
    repository: ayadi05/mlflow
    tag: latest
  ingress:
    enabled: true
    hosts:
    - mlflow.quadride.cetic.be
  service:
    type: LoadBalancer
mongodb:
  auth:
    enabled: true
    rootPassword: R43SDcj1eRYYbPOd
  enabled: false
  initdbScripts:
    create_admin_user.sh: |
      $MONGODB_BIN_DIR/mongo admin --host 127.0.0.1 --port $MONGODB_PORT_NUMBER -u root -p $MONGODB_ROOT_PASSWORD << EOF
      db.createUser({ user: "admin" , pwd: "R43SDcj1eRYYbPOd", roles: ["userAdminAnyDatabase", "dbAdminAnyDatabase", "readWriteAnyDatabase"]})
      use mongodb
      db.user.insert({name: "Ada Lovelace", age: 205})
      EOF
  persistence:
    enabled: true
nginx_ldapauth_proxy:
  enabled: false
  proxy:
    authName: admin
    host: fadi-kibana
    ldapBindDN: cn=admin,dc=ldap,dc=cetic,dc=be
    ldapDN: dc=ldap,dc=cetic,dc=be
    ldapFilter: objectClass=organizationalPerson
    ldapHost: fadi-openldap
    port: 443
    requires:
    - filter: cn=admin,dc=ldap,dc=cetic,dc=be
      name: admin
  secrets:
    ldapBindPassword: R43SDcj1eRYYbPOd
  service:
    externalPort: 5601
    type: NodePort
nifi:
  auth:
    ldap:
      admin: cn=admin,dc=ldap,dc=cetic,dc=be
      enabled: true
      host: ldap://fadi-openldap:389
      pass: R43SDcj1eRYYbPOd
      searchBase: cn=admin,dc=ldap,dc=cetic,dc=be
      searchFilter: (objectClass=*)
      userIdentityAttribute: cn
  enabled: false
  persistence:
    enabled: true
  postStart: /opt/nifi/psql; wget -P /opt/nifi/psql https://jdbc.postgresql.org/download/postgresql-42.2.6.jar
  properties:
    clusterPort: 6007
    clusterSecure: true
    externalSecure: false
    httpPort: null
    httpsPort: 9443
    isNode: false
    webProxyHost: nifi.quadride.cetic.be:30509, 10.129.2.18:30509, nifi.quadride.cetic.be,
      10.129.2.17:30509
  service:
    nodePort: 30509
    type: LoadBalancer
  traefikIngress:
    enabled: true
    host: nifi.quadride.cetic.be
node-red:
  enabled: false
  persistence:
    accessMode: ReadWriteOnce
    enabled: true
    size: 5Gi
  service:
    nodePort: 31880
    port: 1880
    type: NodePort
openldap:
  adminPassword: R43SDcj1eRYYbPOd
  configPassword: password2
  customLdifFiles:
    1-default-users.ldif: '# You can find an example ldif file.'
  enabled: true
  env:
    LDAP_BACKEND: hdb
    LDAP_DOMAIN: ldap.cetic.be
    LDAP_ORGANISATION: Cetic
    LDAP_REMOVE_CONFIG_AFTER_SETUP: "false"
    LDAP_TLS: "true"
    LDAP_TLS_ENFORCE: "false"
    LDAP_TLS_VERIFY_CLIENT: try
  persistence:
    enabled: true
phpldapadmin:
  enabled: true
  env:
    PHPLDAPADMIN_LDAP_HOSTS: fadi-openldap
  ingress:
    annotations: {}
    enabled: true
    hosts:
    - phpldapadmin.quadride.cetic.be
    path: /
  service:
    type: LoadBalancer
postgresql:
  enabled: true
  ldap:
    cron:
      mountPath: /workspace
      repo: ceticasbl/pg-ldap-sync
      restartPolicy: Never
      schedule: 0 * * * *
      subPath: ""
      tag: latest
    enabled: true
    pgldapconfig: |-
      # Reference: https://github.com/larskanis/pg-ldap-sync/blob/master/config/sample-config.yaml
      # Connection parameters to LDAP server
      ldap_connection:
        host: fadi-openldap
        port: 389
        auth:
          method: :simple
          username: CN=admin,DC=ldap,DC=cetic,DC=be
          password: R43SDcj1eRYYbPOd
        # Search parameters for LDAP users which should be synchronized
      ldap_users:
        base: CN=admin,DC=ldap,DC=cetic,DC=be
        # LDAP filter (according to RFC 2254)
        # defines to users in LDAP to be synchronized
        filter: (!(cn=admin))
        # this attribute is used as PG role name
        name_attribute: cn
        # lowercase name for use as PG role name
        lowercase_name: true
      ldap_groups:
          base: DC=ldap,DC=cetic,DC=be
          filter: (|(cn=group1)(cn=group2)(cn=group3))
          # this attribute is used as PG role name
          name_attribute: cn
          # this attribute must reference to all member DN's of the given group
          member_attribute: member
      # Connection parameters to PostgreSQL server
      # see also: http://rubydoc.info/gems/pg/PG/Connection#initialize-instance_method
      pg_connection:
        host: fadi-postgresql
        dbname: postgres # the db name is usually "postgres"
        user: admin # the user name is usually "postgres"
        password: R43SDcj1eRYYbPOd # kubectl get secret --namespace fadi <pod_name> -o jsonpath="{.data.postgresql-password}" | base64 --decode
      pg_users:
        # Filter for identifying LDAP generated users in the database.
        # It's the WHERE-condition to "SELECT rolname, oid FROM pg_roles"
        # filter: rolcanlogin AND NOT rolsuper
        filter: oid IN (SELECT pam.member FROM pg_auth_members pam JOIN pg_roles pr ON pr.oid=pam.roleid WHERE pr.rolname='ldap_users')
        # Options for CREATE RULE statements
        create_options: LOGIN IN ROLE ldap_users
      pg_groups:
        # Filter for identifying LDAP generated groups in the database.
        # It's the WHERE-condition to "SELECT rolname, oid FROM pg_roles"
        # filter: NOT rolcanlogin AND NOT rolsuper
        filter: oid IN (SELECT pam.member FROM pg_auth_members pam JOIN pg_roles pr ON pr.oid=pam.roleid WHERE pr.rolname='ldap_groups')
        # Options for CREATE RULE statements
        create_options: NOLOGIN IN ROLE ldap_groups
        #grant_options:
  persistence:
    enabled: true
  postgresql:
    database: postgres
    initdbscripts: |-
      #!/bin/sh
      psql -c "create role ldap_users;" postgres admin
      psql -c "create role ldap_groups;" postgres admin
    password: R43SDcj1eRYYbPOd
    pghba: |-
      local all all ldap ldapserver=fadi-openldap  ldapport=389 ldaptls=0 ldapbasedn="dc=ldap,dc=cetic,dc=be" ldapbinddn="cn=admin,dc=ldap,dc=cetic,dc=be" ldapbindpasswd=R43SDcj1eRYYbPOd  ldapsearchfilter=cn=$username
      host all all 0.0.0.0/0  ldap ldapserver=fadi-openldap  ldapport=389 ldaptls=0 ldapbasedn="dc=ldap,dc=cetic,dc=be" ldapbinddn="cn=admin,dc=ldap,dc=cetic,dc=be" ldapbindpasswd=R43SDcj1eRYYbPOd  ldapsearchfilter=cn=$username
    username: admin
seldon-core-operator:
  enabled: false
  usageMetrics:
    enabled: false
spark:
  Master:
    Name: spark-master
  WebUi:
    Name: spark-webui
  Worker:
    Name: spark-worker
  Zeppelin:
    Name: spark-zeppelin
    Replicas: 0
  enabled: false
superset:
  configFile: |-
    from flask_appbuilder.security.manager import AUTH_DB,AUTH_LDAP
    #---------------------------------------------------------
    # Superset specific config
    #---------------------------------------------------------
    ROW_LIMIT = 5000
    SUPERSET_WORKERS = 2
    SUPERSET_WEBSERVER_PORT = 8088
    #---------------------------------------------------------
    #---------------------------------------------------------
    # Flask App Builder configuration
    #---------------------------------------------------------
    # Your App secret key
    SECRET_KEY = '\2\1thisismyscretkey\1\2\e\y\y\h'
    # The SQLAlchemy connection string to your database backend
    # This connection defines the path to the database that stores your
    # superset metadata (slices, connections, tables, dashboards, ...).
    # Note that the connection information to connect to the datasources
    # you want to explore are managed directly in the web UI
    SQLALCHEMY_DATABASE_URI = 'sqlite:////var/lib/superset/superset.db'
    # Flask-WTF flag for CSRF
    WTF_CSRF_ENABLED = True
    # Add endpoints that need to be exempt from CSRF protection
    WTF_CSRF_EXEMPT_LIST = []
    # Set this API key to enable Mapbox visualizations
    MAPBOX_API_KEY = ''
    DEBUG=True
    LOG_FORMAT = '%(asctime)s:%(levelname)s:%(name)s:%(message)s'
    LOG_LEVEL = 'DEBUG'
    AUTH_TYPE = AUTH_LDAP
    AUTH_LDAP_SERVER = "ldap://fadi-openldap:389"
    AUTH_LDAP_USE_TLS = False
    AUTH_USER_REGISTRATION = True
    AUTH_LDAP_SEARCH = "dc=ldap,dc=cetic,dc=be"
    AUTH_LDAP_BIND_USER = "cn=admin,dc=ldap,dc=cetic,dc=be"
    AUTH_LDAP_BIND_PASSWORD = "R43SDcj1eRYYbPOd"
    AUTH_LDAP_UID_FIELD = "cn"
  enabled: false
  persistence:
    enabled: true
  service:
    type: NodePort
swaggerui:
  enabled: false
  swaggerui:
    jsonPath: ""
    jsonUrl: https://raw.githubusercontent.com/cetic/tsimulus-saas/master/oas/api-doc/openapi.json
    server:
      description: TSIMULUS API
      url: http://api-tsimulus.fadi.minikube
traefik:
  enabled: false
tsaas:
  enabled: false
zabbix:
  enabled: false
  postgresql:
    enabled: false
  zabbixServer:
    DB_SERVER_HOST: fadi-postgresql
    POSTGRES_DB: postgres
    POSTGRES_PASSWORD: R43SDcj1eRYYbPOd
    POSTGRES_USER: admin
  zabbixagent:
    ZBX_ACTIVE_ALLOW: true
    ZBX_PASSIVE_ALLOW: true
    ZBX_PASSIVESERVERS: 127.0.0.1
    ZBX_SERVER_HOST: 127.0.01
    ZBX_SERVER_PORT: 10051
    enabled: true
  zabbixweb:
    DB_SERVER_HOST: fadi-postgresql
    DB_SERVER_PORT: 5432
    POSTGRES_DB: postgres
    POSTGRES_PASSWORD: R43SDcj1eRYYbPOd
    POSTGRES_USER: admin
    ZBX_SERVER_HOST: zabbix-server
    ZBX_SERVER_PORT: 10051
    enabled: true
fadeployer:
  enabled: true
  env:
    DJANGO_LOGLEVEL: "info"
    DEBUG: "True"
    DATABASE_ENGINE: "postgresql_psycopg2"
    DATABASE_NAME: "postgres"
    DATABASE_USERNAME: "admin"
    DATABASE_PASSWORD: "password1"
    DATABASE_HOST: "fadi-postgresql"
    MINIO_ENDPOINT: "fadi-minio:9000"
    MINIO_EXTERNAL_ENDPOINT: "fadi-minio:9000"
    MINIO_ACCESS_KEY: "admin"
    MINIO_SECRET_KEY: "R43SDcj1eRYYbPOd"
    MINIO_DASHBOARD_URL: "http://minio.quadride.cetic.be:2080/"
    AIRFLOW_DASHBOARD_URL: "http://airflow.cetic.be.quadride.cetic.be:2080/"
  imagePullSecrets: secret-nexus-docker-quadride
